"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from datetime import timedelta
import logging
import os
from pathlib import Path
from corsheaders.defaults import default_headers
from . import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'routine',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# JWT
# https://jpadilla.github.io/django-rest-framework-jwt/
SIMPLE_JWT = {
    'SIGNING_KEY'              : SECRET_KEY,
    'ACCESS_TOKEN_LIFETIME'    : timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME'   : timedelta(days=7),
    'ROTATE_REFRESH_TOKENS'    : False,
    'BLACKLIST_AFTER_ROTATION' : True,
 
    'AUTH_TOKEN_CLASSES'       : ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM'         : 'token_type',
    'TOKEN_USER_CLASS'         : 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM'                : 'jti',
}
REST_USE_JWT = True

# CORS 관련 추가 
CORS_ORIGIN_WHITELIST = ['http://127.0.0.1:3000' ,'http://localhost:3000', 'http://shrimp2ubt.ddns.net:3000'] 
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [ 'token' ]

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = config.DATABASES

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
# USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING
class IPAddressFilter(logging.Filter):
    def filter(self, record):
        if hasattr(record, 'request'):
            x_forwarded_for = record.request.META.get('HTTP_X_FORWARDED_FOR')
            if x_forwarded_for:
                record.ip = x_forwarded_for.split(',')[0]
            else:
                record.ip = record.request.META.get('REMOTE_ADDR')
        return True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'add_ip_address': {
            '()': 'api.settings.IPAddressFilter'
        }
    },
    'formatters': {
        'django.server': {
            'format': '| %(levelname)-7s | %(asctime)s | %(message)s |',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        'standard': {
            'format': '| %(levelname)-7s | %(asctime)s | %(message)s |',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        'request': {
            'format': '| %(levelname)-7s | %(asctime)s | %(ip)-15s | %(message)s |',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler'
        },
        'django.server': {
            'level': 'INFO',
            'encoding': 'utf-8',
            "class": "logging.handlers.RotatingFileHandler",
            'formatter': 'django.server',
            "filename": BASE_DIR / "logs/django_server.log",
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5
        },
        "danbi": {
            'level': 'INFO',
            'encoding': 'utf-8',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'standard',
            'filename': BASE_DIR / 'logs/danbi_routine.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5
        },
        "request": {
            "level": "INFO",
            'encoding': 'utf-8',
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "request",
            "filename": BASE_DIR / "logs/requests.log",
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5
        },
        "error_file": {
            "level": "ERROR",
            'encoding': 'utf-8',
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "standard",
            "filename": BASE_DIR / "logs/errors.log",
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django.utils': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'level': 'INFO',
            'handlers': ['django.server'],
        },
        'django.request': {
            "level": "INFO",
            'filters': ['add_ip_address'],
            "handlers": ["request"]
        },
        'danbi.routine': {
            'level': 'INFO',
            'handlers': ['danbi'],
        },
        'danbi.error': {
            'level': 'ERROR',
            'handlers': ['error_file'],
        },
    }
}